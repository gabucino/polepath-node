"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_type_enum_1 = require("../enums/client-type.enum");
var enums_1 = require("../enums");
var BUNNY_API_KEY = process.env['BUNNY_API_KEY'] || '';
var BUNNY_STORAGE_API_KEY = process.env['BUNNY_STORAGE_API_KEY'] || '';
var HttpBase = /** @class */ (function () {
    function HttpBase(httpClient, clientType) {
        if (clientType === void 0) { clientType = client_type_enum_1.ClientType.API; }
        this.httpClient = httpClient;
        this.clientType = clientType;
        this._baseConfig = {
            headers: {
                AccessKey: this.clientType === client_type_enum_1.ClientType.Storage
                    ? BUNNY_STORAGE_API_KEY
                    : BUNNY_API_KEY,
            },
            baseURL: this.clientType === client_type_enum_1.ClientType.Storage ? enums_1.Domain.Storage : enums_1.Domain.API,
        };
    }
    HttpBase.prototype.fetch = function (url, config) {
        return this.httpClient.get(url, __assign({}, this._baseConfig, config));
    };
    HttpBase.prototype.post = function (url, body, config) {
        return this.httpClient.post(url, body, __assign({}, this._baseConfig, config));
    };
    HttpBase.prototype.put = function (url, body, config) {
        return this.httpClient.put(url, body, __assign({}, this._baseConfig, config));
    };
    HttpBase.prototype.del = function (url, config) {
        return this.httpClient.delete(url, __assign({}, this._baseConfig, config));
    };
    return HttpBase;
}());
exports.HttpBase = HttpBase;
//# sourceMappingURL=http-base.client.js.map